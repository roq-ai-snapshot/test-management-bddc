generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model client {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project     project[]
}

model issue {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  description  String?   @db.VarChar(255)
  status       String?   @db.VarChar(255)
  priority     Int?
  test_case_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  test_case    test_case @relation(fields: [test_case_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  start_date  DateTime? @db.Timestamp(6)
  end_date    DateTime? @db.Timestamp(6)
  client_id   String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  client      client    @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task        task[]
}

model task {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @db.VarChar(255)
  description String?     @db.VarChar(255)
  start_date  DateTime?   @db.Timestamp(6)
  end_date    DateTime?   @db.Timestamp(6)
  status      String?     @db.VarChar(255)
  project_id  String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  project     project     @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_case   test_case[]
}

model test_case {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  status      String?  @db.VarChar(255)
  priority    Int?
  task_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  issue       issue[]
  task        task     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  firstName   String?  @db.VarChar(255)
  lastName    String?  @db.VarChar(255)
  roq_user_id String   @db.VarChar(255)
  tenant_id   String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  client      client[]
}
